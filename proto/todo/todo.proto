syntax = "proto3";
package todo;
option go_package = "github.com/xh3sh/go-grpc-todo-list/proto/todo;todo";

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "TodoService API";
    version: "1.0.0";
  };
  base_path: "/api";
  schemes: HTTP;
  schemes: HTTPS;
  consumes: "application/json";
  produces: "application/json";
};

service TodoService {
  // Создать задачу
  rpc CreateTodo (Todo) returns (Todo) {
    option (google.api.http) = {
      post: "/v1/todos"
      body: "*"
    };
  }
  // Получить задачу по ID
  rpc GetTodo (GetRequest) returns (Todo) {
    option (google.api.http) = {
      get: "/v1/todos/{id}"
    };
  }
  // Список всех задач
  rpc ListTodos (Empty) returns (stream Todo) {
    option (google.api.http) = {
      get: "/v1/todos"
    };
  }
  // Удалить задачу по ID
  rpc DeleteTodo (DeleteRequest) returns (Empty) {
    option (google.api.http) = {
      delete: "/v1/todos/{id}"
    };
  }
  // Обновить задачу (например, статус done)
  rpc UpdateTodo (UpdateTodoRequest) returns (Todo) {
    option (google.api.http) = {
      patch: "/v1/todos/{id}"
      body: "*"
    };
  }
}

message Todo {
  string   id          = 1;
  string   title       = 2;
  string   description = 3;
  string   date        = 4;
  bool     done        = 5;
}

message GetRequest {
  string id = 1;
}

message DeleteRequest {
  string id = 1;
}

message Empty {}

message UpdateTodoRequest {
  string id = 1;
  string title = 2;
  string description = 3;
  bool done = 4;
}
